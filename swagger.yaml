swagger: '2.0'
info:
  description: Api Documentation
  version: '1.0'
  title: Api Documentation
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
host: localhost:8080
basePath: /
tags:
  - name: author
    description: Author Controller
  - name: book
    description: Book Controller
  - name: genre
    description: Genre Controller
  - name: order
    description: Order Controller
  - name: publisher
    description: Publisher Controller
  - name: user
    description: User Controller
  - name: basic-error-controller
    description: Basic Error Controller
paths:
  /authors/addAuthor:
    post:
      tags:
        - author
      summary: addAuthor
      operationId: addAuthorUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: author
          description: author
          required: true
          schema:
            $ref: '#/definitions/SaveAuthorDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthorDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /authors/allAuthors:
    get:
      tags:
        - author
      summary: findAll
      operationId: findAllUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /authors/deleteAuthor/{id}:
    delete:
      tags:
        - author
      summary: deleteAuthor
      operationId: deleteAuthorUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /authors/findByName/{name}:
    get:
      tags:
        - author
      summary: findByName
      operationId: findByNameUsingGET
      produces:
        - '*/*'
      parameters:
        - name: name
          in: path
          description: name
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /authors/getByGenres/{genre}:
    get:
      tags:
        - author
      summary: findAuthorsByGenreList
      operationId: findAuthorsByGenreListUsingGET
      produces:
        - '*/*'
      parameters:
        - name: genre
          in: path
          description: genre
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorGenreListDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /authors/getById/{id}:
    get:
      tags:
        - author
      summary: getAuthorById
      operationId: getAuthorByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthorDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /authors/updateAuthor:
    put:
      tags:
        - author
      summary: updateAuthor
      operationId: updateAuthorUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: authorDTO
          description: authorDTO
          required: true
          schema:
            $ref: '#/definitions/SaveAuthorDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthorDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /authors/{authorId}/books/{id}:
    put:
      tags:
        - author
      summary: author
      operationId: authorUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: authorId
          in: path
          description: authorId
          required: true
          type: integer
          format: int64
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthorDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /books/addBook:
    post:
      tags:
        - book
      summary: addBook
      operationId: addBookUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: book
          description: book
          required: true
          schema:
            $ref: '#/definitions/SaveBookDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BookDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /books/allBooks:
    get:
      tags:
        - book
      summary: getAllBooks
      operationId: getAllBooksUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BookDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /books/delete/{id}:
    delete:
      tags:
        - book
      summary: deleteBook
      operationId: deleteBookUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /books/findByTitle/{title}:
    get:
      tags:
        - book
      summary: findByTitle
      operationId: findByTitleUsingGET
      produces:
        - '*/*'
      parameters:
        - name: title
          in: path
          description: title
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BookDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /books/getByGenre/{genre}:
    get:
      tags:
        - book
      summary: findBookByGenre
      operationId: findBookByGenreUsingGET
      produces:
        - '*/*'
      parameters:
        - name: genre
          in: path
          description: genre
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BookGenreDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /books/getById/{id}:
    get:
      tags:
        - book
      summary: getBookById
      operationId: getBookByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BookDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /books/updateBook:
    put:
      tags:
        - book
      summary: updateBook
      operationId: updateBookUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: bookDTO
          description: bookDTO
          required: true
          schema:
            $ref: '#/definitions/SaveBookDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BookDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /error:
    get:
      tags:
        - basic-error-controller
      summary: error
      operationId: errorUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    head:
      tags:
        - basic-error-controller
      summary: error
      operationId: errorUsingHEAD
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
    post:
      tags:
        - basic-error-controller
      summary: error
      operationId: errorUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - basic-error-controller
      summary: error
      operationId: errorUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      tags:
        - basic-error-controller
      summary: error
      operationId: errorUsingDELETE
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
    options:
      tags:
        - basic-error-controller
      summary: error
      operationId: errorUsingOPTIONS
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
    patch:
      tags:
        - basic-error-controller
      summary: error
      operationId: errorUsingPATCH
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /genres/addGenre:
    post:
      tags:
        - genre
      summary: addGenre
      operationId: addGenreUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: genre
          description: genre
          required: true
          schema:
            $ref: '#/definitions/GenreDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GenreDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /genres/allGenres:
    get:
      tags:
        - genre
      summary: getAllGenres
      operationId: getAllGenresUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/GenreDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /genres/delete/{id}:
    delete:
      tags:
        - genre
      summary: deleteGenre
      operationId: deleteGenreUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /genres/getById/{id}:
    get:
      tags:
        - genre
      summary: getGenreById
      operationId: getGenreByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GenreDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /genres/getByName/{name}:
    get:
      tags:
        - genre
      summary: findByName
      operationId: findByNameUsingGET_1
      produces:
        - '*/*'
      parameters:
        - name: name
          in: path
          description: name
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GenreDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /genres/updateGenre:
    put:
      tags:
        - genre
      summary: updateBook
      operationId: updateBookUsingPUT_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: genreDTO
          description: genreDTO
          required: true
          schema:
            $ref: '#/definitions/GenreDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GenreDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /orders/addOrder:
    post:
      tags:
        - order
      summary: addOrder
      operationId: addOrderUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: orderDTO
          description: orderDTO
          required: true
          schema:
            $ref: '#/definitions/SaveOrderDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /orders/admin/updateOrder:
    post:
      tags:
        - order
      summary: updateOrderByAdmin
      operationId: updateOrderByAdminUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: newOrder
          description: newOrder
          required: true
          schema:
            $ref: '#/definitions/UpdateOrderDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /orders/allOrders:
    get:
      tags:
        - order
      summary: getAllOrders
      operationId: getAllOrdersUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /orders/delete/{id}:
    delete:
      tags:
        - order
      summary: deleteOrder
      operationId: deleteOrderUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /orders/getById/{id}:
    get:
      tags:
        - order
      summary: geOrderById
      operationId: geOrderByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /orders/updateOrder:
    post:
      tags:
        - order
      summary: updateOrder
      operationId: updateOrderUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: newOrder
          description: newOrder
          required: true
          schema:
            $ref: '#/definitions/UpdateOrderDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /publishers/addPublisher:
    post:
      tags:
        - publisher
      summary: addPublisher
      operationId: addPublisherUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: publisher
          description: publisher
          required: true
          schema:
            $ref: '#/definitions/PublisherDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PublisherDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /publishers/allPublishers:
    get:
      tags:
        - publisher
      summary: findAll
      operationId: findAllUsingGET_1
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PublisherDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /publishers/deletePublisher/{id}:
    delete:
      tags:
        - publisher
      summary: deletePublisher
      operationId: deletePublisherUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /publishers/findByName/{name}:
    get:
      tags:
        - publisher
      summary: findByName
      operationId: findByNameUsingGET_2
      produces:
        - '*/*'
      parameters:
        - name: name
          in: path
          description: name
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PublisherDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /publishers/getById/{id}:
    get:
      tags:
        - publisher
      summary: getPublisherById
      operationId: getPublisherByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PublisherDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /publishers/updatePublisher:
    put:
      tags:
        - publisher
      summary: updateBook
      operationId: updateBookUsingPUT_2
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: publisherDTO
          description: publisherDTO
          required: true
          schema:
            $ref: '#/definitions/PublisherDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PublisherDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /users/addUser:
    post:
      tags:
        - user
      summary: addBook
      operationId: addBookUsingPOST_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: userDTO
          description: userDTO
          required: true
          schema:
            $ref: '#/definitions/UserDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /users/allUsers:
    get:
      tags:
        - user
      summary: getAllUsers
      operationId: getAllUsersUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /users/delete/{id}:
    delete:
      tags:
        - user
      summary: deleteBook
      operationId: deleteBookUsingDELETE_1
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /users/getById/{id}:
    get:
      tags:
        - user
      summary: geUserById
      operationId: geUserByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /users/updateUser:
    put:
      tags:
        - user
      summary: updateUser
      operationId: updateUserUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: userDTO
          description: userDTO
          required: true
          schema:
            $ref: '#/definitions/UserDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
definitions:
  AuthorDTO:
    type: object
    properties:
      books:
        type: array
        items:
          $ref: '#/definitions/BookNameDTO'
      dateOfBirth:
        type: string
        format: date
      fullName:
        type: string
      genreList:
        type: array
        items:
          type: string
      id:
        type: integer
        format: int64
    title: AuthorDTO
  AuthorGenreListDTO:
    type: object
    properties:
      fullName:
        type: string
      genreList:
        type: array
        items:
          type: string
    title: AuthorGenreListDTO
  AuthorNameDTO:
    type: object
    properties:
      fullName:
        type: string
      id:
        type: integer
        format: int64
    title: AuthorNameDTO
  BookDTO:
    type: object
    properties:
      authors:
        type: array
        items:
          $ref: '#/definitions/AuthorNameDTO'
      bookId:
        type: integer
        format: int64
      deleted:
        type: boolean
      genres:
        type: array
        items:
          $ref: '#/definitions/GenreNameDTO'
      pageCount:
        type: integer
        format: int32
      price:
        type: integer
        format: int32
      publisher:
        type: string
      releaseYear:
        type: string
        format: date
      title:
        type: string
    title: BookDTO
  BookGenreDTO:
    type: object
    properties:
      bookId:
        type: integer
        format: int64
      genres:
        type: array
        items:
          $ref: '#/definitions/GenreNameDTO'
      title:
        type: string
    title: BookGenreDTO
  BookNameDTO:
    type: object
    properties:
      bookId:
        type: integer
        format: int64
      title:
        type: string
    title: BookNameDTO
  GenreDTO:
    type: object
    properties:
      genreName:
        type: string
      id:
        type: integer
        format: int64
    title: GenreDTO
  GenreNameDTO:
    type: object
    properties:
      genreName:
        type: string
    title: GenreNameDTO
  ModelAndView:
    type: object
    properties:
      empty:
        type: boolean
      model:
        type: object
      modelMap:
        type: object
        additionalProperties:
          type: object
      reference:
        type: boolean
      status:
        type: string
        enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
      view:
        $ref: '#/definitions/View'
      viewName:
        type: string
    title: ModelAndView
  OrderDTO:
    type: object
    properties:
      books:
        type: array
        items:
          $ref: '#/definitions/BookNameDTO'
      order_id:
        type: integer
        format: int64
      status:
        type: string
      sum:
        type: integer
        format: int32
      user:
        type: string
    title: OrderDTO
  PublisherDTO:
    type: object
    properties:
      name:
        type: string
      publisherId:
        type: integer
        format: int64
    title: PublisherDTO
  SaveAuthorDTO:
    type: object
    properties:
      dateOfBirth:
        type: string
        format: date
      fullName:
        type: string
      id:
        type: integer
        format: int64
    title: SaveAuthorDTO
  SaveBookDTO:
    type: object
    properties:
      authorList:
        type: array
        items:
          type: integer
          format: int64
      bookId:
        type: integer
        format: int64
      deleted:
        type: boolean
      genreList:
        type: array
        items:
          type: integer
          format: int64
      pageCount:
        type: integer
        format: int32
      price:
        type: integer
        format: int32
      publisherId:
        type: integer
        format: int64
      releaseYear:
        type: string
        format: date
      title:
        type: string
    title: SaveBookDTO
  SaveOrderDTO:
    type: object
    properties:
      bookList:
        type: array
        items:
          type: integer
          format: int64
      orderId:
        type: integer
        format: int64
      status:
        type: string
      userId:
        type: array
        items:
          type: integer
          format: int64
    title: SaveOrderDTO
  UpdateOrderDTO:
    type: object
    properties:
      bookList:
        type: array
        items:
          type: integer
          format: int64
      orderId:
        type: integer
        format: int64
      status:
        type: string
      userId:
        type: integer
        format: int64
    title: UpdateOrderDTO
  UserDTO:
    type: object
    properties:
      blocked:
        type: boolean
      id:
        type: integer
        format: int64
      login:
        type: string
      password:
        type: string
      role:
        type: string
        enum:
          - USER
          - ADMIN
    title: UserDTO
  View:
    type: object
    properties:
      contentType:
        type: string
    title: View
